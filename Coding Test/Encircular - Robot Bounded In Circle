On an infinite plane, a robot initially stands at (0, 0) and faces north.  The robot can receive one of three instructions:

"G": go straight 1 unit;
"L": turn 90 degrees to the left;
"R": turn 90 degress to the right.
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

 

Example 1:

Input: "GGLLGG"
Output: true
Explanation: 
The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).
When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.
Example 2:

Input: "GG"
Output: false
Explanation: 
The robot moves north indefinitely.
Example 3:

Input: "GL"
Output: true
Explanation: 
The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...
 

Note:

1 <= instructions.length <= 100
instructions[i] is in {'G', 'L', 'R'}


class Solution {
    public boolean isRobotBounded(String instructions) {
        char[] instr = instructions.toCharArray();
        int count = 0;
        int vert_mov = 0;
        int hor_mov = 0;
        // we want to check if robot finishes movement facing north, and we use the count         // variable to check this. We reset at 4 and -4 because that's a full circle. 
        for(int i=0; i< instr.length; i++){
            if(instr[i] == 'L'){
                count--;
                if(count == -4) count = 0;
            }
            else if(instr[i] == 'R'){
                count++;
                if(count == 4) count = 0;
            }
            
            // for every 'G', we keep track of the vertical and horizontal movement
            // if the robot finishes facing north, it must be back at origin to fit
            //within a circle. But if count == 0 (face north) but vertical and horizontal 
            // movement are both 0, that's also a passing case. 
            else{
                if(count == 0) vert_mov++;
                else if(count ==1) hor_mov++;
                else if(count == 2) vert_mov--;
                else if(count == 3) hor_mov--;
                else if(count == -1) hor_mov--;
                else if(count == -2) vert_mov--;
                else if(count == -3) hor_mov++;
                
            }
        }//end of for
        if(count == 0 && (hor_mov != 0 || vert_mov != 0)) return false;
        return true;
        
    }
}

